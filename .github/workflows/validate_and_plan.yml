name: Validate and Plan Terraform code

on: 
  push:
  workflow_dispatch: #[push, workflow_dispatch]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
    terraform:
        name: Terraform
        runs-on: ubuntu-latest
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        defaults:
            run:
                shell: bash
                working-directory: ./dev

        permissions:
          pull-requests: write
          issues: write

        steps:
        - uses: hashicorp/setup-terraform@v3

        - name: Checkout
          uses: actions/checkout@v2
        
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: ${{ secrets.TERRAFORM_VERSION }}

        # - name: Set up Azure Credentials
        #   uses: azure/login@v1
        #   with:
        #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #     client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Show Terraform version
          id: version
          run: terraform version

        - name: Terraform init
          id: init
          run: terraform init

        - name: Terraform format
          id: fmt
          run: |
           cd ..
           terraform fmt -recursive

        - name: Terraform configuration validation
          id: validate
          if: (success() || failure())
          run: terraform validate -no-color

        - name: Terraform Plan
          id: plan
          run: |
           terraform plan -no-color -detailed-exitcode #-json -out=tf.plan
          continue-on-error: true

        # - name: Terraform JSON output
        #   id: json
        #   run: terraform show -json tf.plan > tfplan.json
        
        # - name: Show tfplan.json contents
        #   run: |
        #     cat tfplan.json
    
        - name: Echo STDout
          id: stdout
          run: echo ${{ steps.plan.outputs.stdout }}
          continue-on-error: true

        - name: Echo STDerr
          id: stderr
          run: echo ${{ steps.plan.outputs.stderr }}
          continue-on-error: true

        - name: Echo Exitcode
          id: exitcode
          run: echo ${{ steps.plan.outputs.exitcode }}
          continue-on-error: true

        - uses: actions/github-script@v7
          #if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}\n${{steps.plan.outputs.stderr}}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>
        
              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`
        
              </details>
        
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
              <details><summary>Show Plan</summary>
        
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
        
              </details>
        
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              })

            
          
